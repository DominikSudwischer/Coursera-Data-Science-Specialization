df$PROPDMGFACTOR[df$PROPDMGEXP == "b"] <- 1000000000
selection <- !is.na(as.numeric(df$PROPDMGEXP))
df$PROPDMGFACTOR[selection] <- 10^as.numeric(df$PROPDMGEXP[selection])
unique(df$PROPDMGFACTOR)
df$PROPDMGFACTOR
1e+01
is.na(as.numeric(""))
df$TOTALECONDMG <- df$CROPDMG * df$PROPDMGFACTOR + df$PROPDMG * df$PROPDMGFACTOR
df$TOTALECONDMG
unique(tf$EVTYPE)
tolower(df$EVTYPE)
consolidate <- function(event)
{
if(grepl("hurricane", event) || grepl("typhoon", event) || grepl("tornado", event))
{ "hurricane" }
else if(grepl("drought", event) || grepl("dry", event) || grepl("hot", event) ||
grepl("heat", event) || grepl("warm", event)|| grepl("hight temp", event) ||
grepl("warmth", event))
{ "heatwave" }
else if(grepl("blizzard", event) || grepl("hail", event) ||
grepl("snow", event) || grepl("galze", event))
{ "blizzard" }
else if(grepl("tstm", event) || grepl("thunderstorm", event)
|| grepl("wind", event)) { "storm" }
else if(grepl("rain", event) || grepl("wet", event)) { "rainfall" }
else if(grepl("ice", event) || grepl("icy", event) || grepl("cold", event) ||
grepl("low temp", event) || grepl("freez", event))
else { event }
consolidate <- function(event)
{
if(grepl("hurricane", event) || grepl("typhoon", event) || grepl("tornado", event))
{ "hurricane" }
else if(grepl("drought", event) || grepl("dry", event) || grepl("hot", event) ||
grepl("heat", event) || grepl("warm", event)|| grepl("hight temp", event) ||
grepl("warmth", event))
{ "heatwave" }
else if(grepl("blizzard", event) || grepl("hail", event) ||
grepl("snow", event) || grepl("galze", event))
{ "blizzard" }
else if(grepl("tstm", event) || grepl("thunderstorm", event)
|| grepl("wind", event)) { "storm" }
else if(grepl("rain", event) || grepl("wet", event)) { "rainfall" }
else if(grepl("ice", event) || grepl("icy", event) || grepl("cold", event) ||
grepl("low temp", event) || grepl("freez", event)) { "cold" }
else { event }
}
tolower(df$EVTYPE)
lapplay(tolower(df$EVTYPE), consolidate)
lapply(tolower(df$EVTYPE), consolidate)
knitr::opts_chunk$set(echo = TRUE)
library(lubridate)
library(dplyr)
library(ggplot2)
df <- read.csv("repdata%2Fdata%2FStormData.csv.bz2")
summary(df)
#tf <- cbind(df) # to remove
df <- lapply(df, tolower)
unique(df$CROPDMGEXP)
unique(df$PROPDMGEXP)
selection <- !((df$CROPDMGEXP %in% c("+", "-", "?")) | (df$PROPDMGEXP %in% c("+", "-", "?")))
df <- df[selection, ]
dim(selection)
df <- cbind(tf)
selection <- !((df$CROPDMGEXP %in% c("+", "-", "?")) | (df$PROPDMGEXP %in% c("+", "-", "?")))
df <- df[selection, ]
df <- cbind(tf)
#tf <- cbind(df) # to remove
df <- lapply(df, tolower)
unique(df$CROPDMGEXP)
unique(df$PROPDMGEXP)
dim(df)
df
data.frame(df)
df <- cbind(tf)
#tf <- cbind(df) # to remove
df <- data.frame(lapply(df, tolower))
unique(df$CROPDMGEXP)
unique(df$PROPDMGEXP)
selection <- !((df$CROPDMGEXP %in% c("+", "-", "?")) | (df$PROPDMGEXP %in% c("+", "-", "?")))
df <- df[selection, ]
df$PROPDMGFACTOR <- 1
df$PROPDMGFACTOR[df$PROPDMGEXP == "h"] <- 100
df$PROPDMGFACTOR[df$PROPDMGEXP == "k"] <- 1000
df$PROPDMGFACTOR[df$PROPDMGEXP == "m"] <- 1000000
df$PROPDMGFACTOR[df$PROPDMGEXP == "b"] <- 1000000000
selection <- !is.na(as.numeric(df$PROPDMGEXP))
df$CROPDMGFACTOR[selection] <- 10^as.numeric(df$CROPDMGEXP[selection])
df$CROPDMGFACTOR <- 1
df$CROPDMGFACTOR[df$CROPDMGEXP == "h"] <- 100
df$CROPDMGFACTOR[df$CROPDMGEXP == "k"] <- 1000
df$CROPDMGFACTOR[df$CROPDMGEXP == "m"] <- 1000000
df$CROPDMGFACTOR[df$CROPDMGEXP == "b"] <- 1000000000
selection <- !is.na(as.numeric(df$CROPDMGEXP))
df$CROPDMGFACTOR[selection] <- 10^as.numeric(df$CROPDMGEXP[selection])
df$TOTALECONDMG <- df$CROPDMG * df$PROPDMGFACTOR + df$PROPDMG * df$PROPDMGFACTOR
typeof(df$CROPDMG)
typeof(df$CROPDMGFACTOR)
typeof(df$PROPDMGFACTOR)
typeof(df$PROPDMG)
df$TOTALECONDMG
2 * 2.0
df$TOTALECONDMG <- as.numeric(df$CROPDMG) * as.numeric(df$PROPDMGFACTOR) +
as.numeric(df$PROPDMG) *
as.numeric(df$PROPDMGFACTOR)
df$TOTALECONDMG
selection <- !((df$CROPDMGEXP %in% c("+", "-", "?")) | (df$PROPDMGEXP %in% c("+", "-", "?")))
df <- df[selection, ]
df$PROPDMGFACTOR <- 1
df$PROPDMGFACTOR[df$PROPDMGEXP == "h"] <- 100
df$PROPDMGFACTOR[df$PROPDMGEXP == "k"] <- 1000
df$PROPDMGFACTOR[df$PROPDMGEXP == "m"] <- 1000000
df$PROPDMGFACTOR[df$PROPDMGEXP == "b"] <- 1000000000
selection <- !is.na(as.numeric(df$PROPDMGEXP))
df$CROPDMGFACTOR[selection] <- 10^as.numeric(df$CROPDMGEXP[selection])
df$CROPDMGFACTOR <- 1
df$CROPDMGFACTOR[df$CROPDMGEXP == "h"] <- 100
df$CROPDMGFACTOR[df$CROPDMGEXP == "k"] <- 1000
df$CROPDMGFACTOR[df$CROPDMGEXP == "m"] <- 1000000
df$CROPDMGFACTOR[df$CROPDMGEXP == "b"] <- 1000000000
selection <- !is.na(as.numeric(df$CROPDMGEXP))
df$CROPDMGFACTOR[selection] <- 10^as.numeric(df$CROPDMGEXP[selection])
df$TOTALECONDMG <- as.numeric(df$CROPDMG) * as.numeric(df$PROPDMGFACTOR) +
as.numeric(df$PROPDMG) *
as.numeric(df$PROPDMGFACTOR)
consolidate <- function(event)
{
if(grepl("hurricane", event) || grepl("typhoon", event) || grepl("tornado", event))
{ "hurricane" }
else if(grepl("drought", event) || grepl("dry", event) || grepl("hot", event) ||
grepl("heat", event) || grepl("warm", event)|| grepl("hight temp", event) ||
grepl("warmth", event))
{ "heatwave" }
else if(grepl("blizzard", event) || grepl("hail", event) ||
grepl("snow", event) || grepl("galze", event))
{ "blizzard" }
else if(grepl("tstm", event) || grepl("thunderstorm", event)
|| grepl("wind", event))
{ "thunderstorm or heavy wind" }
else if(grepl("rain", event) || grepl("wet", event)) { "rainfall" }
else if(grepl("ice", event) || grepl("icy", event) || grepl("cold", event) ||
grepl("low temp", event) || grepl("freez", event))
{ "low temperature" }
else { event }
}
df$EVTYPE <- lapply(df$EVTYPE, consolidate)
a <- grepl("house|table", "thisisatable")
a
df$YEAR <- year(as.Date.character(df$BGN_DATE, format = "%m/%d/%Y"))
records <- cbind(df)[df$YEAR >= 2005, ]
dim(records)
health_df <- records[, c("INJURIES", "FATALITIES", "EVTYPE")]
prop_df <- records[, c("TOTALECONDMG", "EVTYPE")]
sum(matrix(data = is.na(health_df), ncol = 1))
sum(matrix(data = is.na(prop_df), ncol = 1))
health_df_agg <- health_df[, c("INJURIES", "FATALITIES")] %>%
group_by(health_df$EVTYPE) %>% summarise_all(funs(sum))
tmp <- matrix(health_df$EVTYPE, ncol = 1)
typeof(tmp)
vector(tmp)
unlist(tmp)
health_df$EVTYPE <- unlist(health_df$EVTYPE)
prop_df$EVTYPE <- unlist(prop_df$EVTYPE)
health_df_agg <- health_df[, c("INJURIES", "FATALITIES")] %>%
group_by(health_df$EVTYPE) %>% summarise_all(funs(sum))
is.numeric(health_df$INJURIES)
is.numeric(health_df$FATALITIES)
df$EVTYPE <- unlist(df$EVTYPE)
?sapplay
?sapply
df$INJURIES <- as.numeric(df$INJURIES)
df$FATALITIES <- as.numeric(df$FATALITIES)
health_df_agg <- health_df[, c("INJURIES", "FATALITIES")] %>%
group_by(health_df$EVTYPE) %>% summarise_all(funs(sum))
health_df <- records[, c("INJURIES", "FATALITIES", "EVTYPE")]
econ_df <- records[, c("TOTALECONDMG", "EVTYPE")]
knitr::opts_chunk$set(echo = TRUE)
library(lubridate)
library(dplyr)
library(ggplot2)
df <- read.csv("repdata%2Fdata%2FStormData.csv.bz2")
summary(df)
#tf <- cbind(df) # to remove
df[, c("CROPDMGEXP", "PROPDMGEXP", "EVTYPE")] <- data.frame(sapply(df[, c("CROPDMGEXP", "PROPDMGEXP", "EVTYPE")], tolower))
unique(df$CROPDMGEXP)
unique(df$PROPDMGEXP)
selection <- !((df$CROPDMGEXP %in% c("+", "-", "?")) | (df$PROPDMGEXP %in% c("+", "-", "?")))
df <- df[selection, ]
df$PROPDMGFACTOR <- 1
df$PROPDMGFACTOR[df$PROPDMGEXP == "h"] <- 100
df$PROPDMGFACTOR[df$PROPDMGEXP == "k"] <- 1000
df$PROPDMGFACTOR[df$PROPDMGEXP == "m"] <- 1000000
df$PROPDMGFACTOR[df$PROPDMGEXP == "b"] <- 1000000000
selection <- !is.na(as.numeric(df$PROPDMGEXP))
df$CROPDMGFACTOR[selection] <- 10^as.numeric(df$CROPDMGEXP[selection])
df$CROPDMGFACTOR <- 1
df$CROPDMGFACTOR[df$CROPDMGEXP == "h"] <- 100
df$CROPDMGFACTOR[df$CROPDMGEXP == "k"] <- 1000
df$CROPDMGFACTOR[df$CROPDMGEXP == "m"] <- 1000000
df$CROPDMGFACTOR[df$CROPDMGEXP == "b"] <- 1000000000
selection <- !is.na(as.numeric(df$CROPDMGEXP))
df$CROPDMGFACTOR[selection] <- 10^as.numeric(df$CROPDMGEXP[selection])
df$TOTALECONDMG <- as.numeric(df$CROPDMG) * as.numeric(df$PROPDMGFACTOR) +
as.numeric(df$PROPDMG) *
as.numeric(df$PROPDMGFACTOR)
consolidate <- function(event)
{
if(grepl("hurricane|typhoon|tornado", event))
{ "hurricane" }
else if(grepl("drought|dry|hot|heat|warm|high temp|warmth", event))
{ "heatwave" }
else if(grepl("blizzard|hail|snow|glaze", event))
{ "blizzard" }
else if(grepl("tstm|thunderstorm|wind", event))
{ "thunderstorm or heavy wind" }
else if(grepl("rain|wet", event))
{ "rainfall" }
else if(grepl("ice|icy|cold|low temp|freez", event))
{ "low temperature" }
else { event }
}
df$EVTYPE <- unlist(lapply(df$EVTYPE, consolidate))
df$YEAR <- year(as.Date.character(df$BGN_DATE, format = "%m/%d/%Y"))
records <- df[df$YEAR >= 2005, ]
health_df <- records[, c("INJURIES", "FATALITIES", "EVTYPE")]
econ_df <- records[, c("TOTALECONDMG", "EVTYPE")]
sum(matrix(data = is.na(health_df), ncol = 1))
sum(matrix(data = is.na(econ_df), ncol = 1))
health_df_agg <- health_df[, c("INJURIES", "FATALITIES")] %>%
group_by(health_df$EVTYPE) %>% summarise_all(funs(sum))
health_df_agg$DAMAGE = health_df_agg$INJURIES + 4 * health_df_agg$FATALITIES
health_df_agg <- health_df_agg[order(-health_df_agg$DAMAGE, -health_df_agg$FATALITIES), ]
colnames(health_df_agg)[1] = "EVTYPE"
econ_df_agg <- econ_df %>% group_by(econ_df$EVTYPE) %>%
summarise(PROPDMG = sum(PROPDMG))
econ_df_agg <- econ_df %>% group_by(econ_df$EVTYPE) %>%
summarise(TOTALECONDMG = sum(TOTALECONDMG))
econ_df_agg <- econ_df_agg[order(-econ_df_agg$TOTALECONDMG), ]
colnames(econ_df_agg)[1] = "EVTYPE"
econ_df_agg <- econ_df %>% group_by(econ_df$EVTYPE) %>%
summarise(TOTALECONDMG = sum(TOTALECONDMG))
econ_df_agg <- econ_df_agg[order(-econ_df_agg$TOTALECONDMG), ]
colnames(econ_df_agg)[1] = "EVTYPE"
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
g <- ggplot(data=head(health_df_agg), aes(reorder(EVTYPE, -DAMAGE), DAMAGE)) +
geom_bar(stat = "identity", fill="#FF9999", color = "black") +
labs(x = "Weather Event", y = "Weighted Population Damage",
caption = "Weighted Population Damage of Various Weather\nEvents from 2005 to 2011") +
#ggtitle("Weighted Population Damage of Various Weather Events from 2005 to 2011") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
h <- ggplot(data=head(econ_df_agg), aes(reorder(EVTYPE, -PROPDMG), PROPDMG)) +
geom_bar(stat = "identity", fill="#FF9999", color = "black") +
labs(x = "Weather Event", y = "Property Damage",
caption = "Property Damage of Various Weather\nEvents from 2005 to 2011") +
#ggtitle("Economic Damage of Various Weather Events from 2005 to 2011") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
multiplot(g, h, cols = 2)
g <- ggplot(data=head(health_df_agg), aes(reorder(EVTYPE, -DAMAGE), DAMAGE)) +
geom_bar(stat = "identity", fill="#FF9999", color = "black") +
labs(x = "Weather Event", y = "Weighted Population Damage",
caption = "Weighted Population Damage of Various Weather\nEvents from 2005 to 2011") +
#ggtitle("Weighted Population Damage of Various Weather Events from 2005 to 2011") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
h <- ggplot(data=head(econ_df_agg), aes(reorder(EVTYPE, -TOTALECONDMG), TOTALECONDMG)) +
geom_bar(stat = "identity", fill="#FF9999", color = "black") +
labs(x = "Weather Event", y = "Property Damage",
caption = "Property Damage of Various Weather\nEvents from 2005 to 2011") +
#ggtitle("Economic Damage of Various Weather Events from 2005 to 2011") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
multiplot(g, h, cols = 2)
unique(df$EVTYPE)
consolidate("hello")
tmp <- cbind(tf)
df <- read.csv("repdata%2Fdata%2FStormData.csv.bz2")
summary(df)
df$EVTYPE
tf <- cbind(df) # to remove
df[, c("CROPDMGEXP", "PROPDMGEXP", "EVTYPE")] <- data.frame(sapply(df[, c("CROPDMGEXP", "PROPDMGEXP", "EVTYPE")], tolower))
unique(df$CROPDMGEXP)
unique(df$PROPDMGEXP)
selection <- !((df$CROPDMGEXP %in% c("+", "-", "?")) | (df$PROPDMGEXP %in% c("+", "-", "?")))
df <- df[selection, ]
df$PROPDMGFACTOR <- 1
df$PROPDMGFACTOR[df$PROPDMGEXP == "h"] <- 100
df$PROPDMGFACTOR[df$PROPDMGEXP == "k"] <- 1000
df$PROPDMGFACTOR[df$PROPDMGEXP == "m"] <- 1000000
df$PROPDMGFACTOR[df$PROPDMGEXP == "b"] <- 1000000000
selection <- !is.na(as.numeric(df$PROPDMGEXP))
df$CROPDMGFACTOR[selection] <- 10^as.numeric(df$CROPDMGEXP[selection])
df$CROPDMGFACTOR <- 1
df$CROPDMGFACTOR[df$CROPDMGEXP == "h"] <- 100
df$CROPDMGFACTOR[df$CROPDMGEXP == "k"] <- 1000
df$CROPDMGFACTOR[df$CROPDMGEXP == "m"] <- 1000000
df$CROPDMGFACTOR[df$CROPDMGEXP == "b"] <- 1000000000
selection <- !is.na(as.numeric(df$CROPDMGEXP))
df$CROPDMGFACTOR[selection] <- 10^as.numeric(df$CROPDMGEXP[selection])
df$TOTALECONDMG <- as.numeric(df$CROPDMG) * as.numeric(df$PROPDMGFACTOR) +
as.numeric(df$PROPDMG) *
as.numeric(df$PROPDMGFACTOR)
consolidate <- function(event)
{
if(grepl("hurricane|typhoon|tornado", event))
{ "hurricane" }
else if(grepl("drought|dry|hot|heat|warm|high temp|warmth", event))
{ "heatwave" }
else if(grepl("blizzard|hail|snow|glaze", event))
{ "blizzard" }
else if(grepl("tstm|thunderstorm|wind", event))
{ "thunderstorm or heavy wind" }
else if(grepl("rain|wet", event))
{ "rainfall" }
else if(grepl("ice|icy|cold|low temp|freez", event))
{ "low temperature" }
else { event }
}
sapply(df$EVTYPE, consolidate)
unique(sapply(df$EVTYPE, consolidate))
unique(sapply(as.character(df$EVTYPE), consolidate))
df$EVTYPE <- as.factor(sapply(as.character(df$EVTYPE, consolidate)))
df$EVTYPE <- sapply(as.character(df$EVTYPE, consolidate))
consolidate <- function(event)
{
if(grepl("hurricane|typhoon|tornado", event))
{ "hurricane" }
else if(grepl("drought|dry|hot|heat|warm|high temp|warmth", event))
{ "heatwave" }
else if(grepl("blizzard|hail|snow|glaze", event))
{ "blizzard" }
else if(grepl("tstm|thunderstorm|wind", event))
{ "thunderstorm or heavy wind" }
else if(grepl("rain|wet", event))
{ "rainfall" }
else if(grepl("ice|icy|cold|low temp|freez", event))
{ "low temperature" }
else { event }
}
df$EVTYPE <- sapply(as.character(df$EVTYPE, consolidate))
df$EVTYPE <- as.factor(sapply(as.character(df$EVTYPE), consolidate))
unique(df$EVTYPE)
df$EVTYPE <- as.factor(unisapply(as.character(df$EVTYPE), consolidate))
df$EVTYPE <- as.factor(sapply(as.character(df$EVTYPE), consolidate))
df$YEAR <- year(as.Date.character(df$BGN_DATE, format = "%m/%d/%Y"))
records <- df[df$YEAR >= 2005, ]
health_df <- records[, c("INJURIES", "FATALITIES", "EVTYPE")]
econ_df <- records[, c("TOTALECONDMG", "EVTYPE")]
sum(matrix(data = is.na(health_df), ncol = 1))
sum(matrix(data = is.na(econ_df), ncol = 1))
health_df_agg <- health_df[, c("INJURIES", "FATALITIES")] %>%
group_by(health_df$EVTYPE) %>% summarise_all(funs(sum))
health_df_agg$DAMAGE = health_df_agg$INJURIES + 4 * health_df_agg$FATALITIES
health_df_agg <- health_df_agg[order(-health_df_agg$DAMAGE, -health_df_agg$FATALITIES), ]
colnames(health_df_agg)[1] = "EVTYPE"
econ_df_agg <- econ_df %>% group_by(econ_df$EVTYPE) %>%
summarise(TOTALECONDMG = sum(TOTALECONDMG))
econ_df_agg <- econ_df_agg[order(-econ_df_agg$TOTALECONDMG), ]
colnames(econ_df_agg)[1] = "EVTYPE"
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
g <- ggplot(data=head(health_df_agg), aes(reorder(EVTYPE, -DAMAGE), DAMAGE)) +
geom_bar(stat = "identity", fill="#FF9999", color = "black") +
labs(x = "Weather Event", y = "Weighted Population Damage",
caption = "Weighted Population Damage of Various Weather\nEvents from 2005 to 2011") +
#ggtitle("Weighted Population Damage of Various Weather Events from 2005 to 2011") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
h <- ggplot(data=head(econ_df_agg), aes(reorder(EVTYPE, -TOTALECONDMG), TOTALECONDMG)) +
geom_bar(stat = "identity", fill="#FF9999", color = "black") +
labs(x = "Weather Event", y = "Property Damage",
caption = "Property Damage of Various Weather\nEvents from 2005 to 2011") +
#ggtitle("Economic Damage of Various Weather Events from 2005 to 2011") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
multiplot(g, h, cols = 2)
health_df_agg[health_df_agg$EVTYPE %in% c("TORNADO", "EXCESSIVE HEAT", "LIGHTNING"), ]
econ_df_agg[econ_df_agg$EVTYPE %in% c("THUNDERSTORM WIND", "FLASH FLOOD", "TORNADO"), ]
tornado_data <- df[df$EVTYPE == "TORNADO", c("INJURIES", "FATALITIES", "YEAR")]
tornado_data <- tornado_data %>% group_by(tornado_data$YEAR) %>%
summarise(SUM_INJURIES = sum(INJURIES), SUM_FATALITIES = sum(FATALITIES))
colnames(tornado_data)[1] = "YEAR"
g <- ggplot(data=tornado_data, aes(YEAR)) +
geom_line(aes(y = tornado_data$SUM_INJURIES)) +
scale_x_continuous(breaks = seq(1950, 2011, 5),1) +
labs(x = "Year", y = "Injuries",
caption = "Injuries by Tornadoes per Year") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
h <- ggplot(data=tornado_data, aes(YEAR)) +
geom_line(aes(y = tornado_data$SUM_FATALITIES)) +
scale_x_continuous(breaks = seq(1950, 2011, 5),1) +
labs(x = "Year", y = "Fatalities",
caption = "Fatalities by Tornadoes per Year") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
multiplot(g, h)
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
tornado_data <- df[df$EVTYPE == "hurricane", c("INJURIES", "FATALITIES", "YEAR")]
tornado_data <- tornado_data %>% group_by(tornado_data$YEAR) %>%
summarise(SUM_INJURIES = sum(INJURIES), SUM_FATALITIES = sum(FATALITIES))
colnames(tornado_data)[1] = "YEAR"
g <- ggplot(data=tornado_data, aes(YEAR)) +
geom_line(aes(y = tornado_data$SUM_INJURIES)) +
scale_x_continuous(breaks = seq(1950, 2011, 5),1) +
labs(x = "Year", y = "Injuries",
caption = "Injuries by Hurricanes per Year") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
h <- ggplot(data=tornado_data, aes(YEAR)) +
geom_line(aes(y = tornado_data$SUM_FATALITIES)) +
scale_x_continuous(breaks = seq(1950, 2011, 5),1) +
labs(x = "Year", y = "Fatalities",
caption = "Fatalities by Hurricanes per Year") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
multiplot(g, h)
health_df_agg[health_df_agg$EVTYPE %in% c("hurriance", "heatwave", "thunderstorm or heavy wind"), ]
health_df_agg[health_df_agg$EVTYPE %in% c("hurricane", "heatwave", "thunderstorm or heavy wind"), ]
econ_df_agg[econ_df_agg$EVTYPE %in% c("hurricane", "flood", "storm or heavy wind"), ]
econ_df_agg[econ_df_agg$EVTYPE %in% c("hurricane", "flood", "thunderstorm or heavy wind"), ]
tornado_data <- df[df$EVTYPE == "hurricane", c("FATALITIES", "YEAR")]
tornado_data <- tornado_data %>% group_by(tornado_data$YEAR) %>%
summarise(SUM_FATALITIES = sum(FATALITIES))
colnames(tornado_data)[1] = "YEAR"
g <- ggplot(data=tornado_data, aes(YEAR)) +
geom_line(aes(y = tornado_data$SUM_FATALITIES)) +
scale_x_continuous(breaks = seq(1950, 2011, 5), "YEAR") +
labs(x = "Year", y = "Injuries",
caption = "Fatalities by Hurricanes per Year") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
g
